#!/bin/bash
#creating a function that extracts the list of cities we made from Nicolais folksite and using "-s" to suppress the output
cities_list() {
    curl -s "https://nicobus.folk.ntnu.no/cities"
}

#making a variable that extracts the coordinates of the random city the user will guess the temperature in
city_coordinates() {
    #We used local to make the variables belong to the "city_coordinates" function so that if we use the same variable names later, it doesn't crash 
    #retrieving the values from the cities.txt file with "$1" and "$2"
    local latitude="$1"
    local longitude"$2"

    #Getting the weather information with the "curl" command about the different cities from the open-meteo API and using "-s" to 
        #suppress the output so that we can create the output that we want to instead and making it into a variable that we used
        #in the next section
    local response=$(curl -s "https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true")

    #making a new local variable where we print out the "response" variable from the last part and then using "| jq" to extract 
        #a specific part. In this case we only want the temperature, so we used '.current_weather.temperature' to extract only the
        #temperature from the weather API
    local temp=$(echo "$response" | jq '.current_weather.temperature')
    #printing out the temperature using the variable created in the last line
    echo "$temp"
}

#making a variable and storing the information from the "cities_list" variable into this new one 
city_data=$(cities_list)
#Checking if the strin "city_data" is empty using "-z" 
if [[ -z "$city_data" ]]; then
    #If the string is empty, then we print out this message and exits the script
  echo "Failed to fetch city data. Exiting."
  exit 1
fi

#making a game loop
while true; do
    #randomly selecting the city that the user will guess the temperature in
        #Getting all the weather information from the city the user is guessing
        #Using printf to print out the weather information and "%s\n" to make 
        #it print every new element on a new line to make it easier to filter
        #out and extract the right information from the array. We used "| shuf"
        #to shuffle the lines and using "-n 1" to randomly select one line so
        #that the user only guesses on one random cty
    random_city_info=$(printf "%s\n" "${cities[@]}" | shuf -n 1)
    #Getting the information from the "random_city_info" and splitting the string
        #at the comma using "| cut -d','" and "-f1" to cut the first field which is  
        #the city name
    city_name=$(echo "$random_city_info" | cut -d',' -f1)
    #doing the same as the last line, but using "-f2" instead to extract the second
        #part between the first and second comma, which is the latitude value 
    latitude=$(echo "$random_city_info" | cut -d',' -f2)
    #the same as the last line, but "-f3" extracts the third value between the 
        #second and third comma, which is the longitude value
    longitude=$(echo "$random_city_info" | cut -d',' -f3)

    #Making a variable for the temperature at the given latitude and longitude
    temperature=$()

# if the user want to quit, the quit option is stored in the same variable where the user needs to guess a cities temperature.
  # they get the option to write "quit" and when they write it, this will print the message "Goodbye! thanks for playing."
  if [[ "$USER_GUESS" == "quit" ]]; then
      echo "Goodbye! Thanks for playing."
      break
  fi

# "!" means not, "[[ "$user_guess" =~ ... ]]:"" Checks if the users input matches the specified pattern. "^" is the start of the input, "-?" allows it to
  # use negative numbers, "[0-9]+" will match single digits from 0 - 9, and the "+" does so it allows multiple digits. "\" does so it treats the "." as a plain dot
  # so you can write for example 14.7 when guessing the Celsius degrees. the "?" at the end does so you have the option to include a "." in your guess, or not. 
  if ! [[ "$user_guess" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
      echo "Please enter a valid number for the temperature."
      continue
  fi

  # This code asks the get_temperature_by_coords function to get the current temperature for a city's location and saves it in the variable actual_temp. 
  # this value is used to compare it with the user's guess.
  actual_temp=$(get_temperature_by_coords "$latitude" "$longitude")

  # This checks if the value of actual_temp (the temperature fetched from the API) is "null".
# "null" means the API didn't return a valid temperature, because of network issues, invalid coordinates, or API server problems).
    if [[ "$ACTUAL_TEMP" == "null" ]]; then
    # So if it is "null" it will display this message
      echo "Failed to fetch the temperature for ${CITY_NAME}. Please try again."
      continue
  fi

# "diff" will compare the users guessed temperature to the actual temperature. The "bc" command is used as for doing math like a calculator
  # "tr -d" will remove the minus sign to make the difference always be positive.
  diff=$(echo "$actual_temp - $user_guess" | bc | tr -d -)
  # if the gussed temperature is "< 3"(3 or less), then it is close enough for it do be correct.
  if (( $(echo "$diff < 3" | bc -l) )); then
      # Here it will fetch the city_name and acutal_temp and display it if the guess was within the threshhold or not.
      echo "Congratulations! The actual temperature in ${city_name} is ${actual_temp}°C. You were close!"
  else
      echo "Sorry, the actual temperature in ${city_name} is ${actual_temp}°C. Better luck next time!"
  fi

    #Asking the user if they want to play again
    echo "Do you want to try again? (y/n)"
    read -r replay
    #checking if the user wants to play again or not
    #At first, we had "if [[ "$replay" = "n" ]]; then", but we felt that it was more natural that if the user writes something random then they stop the game, rather 
        #than continuing, so we decided to change that:
        #We now have that if the answer is not "y", then the program stops and prints out the break message
    if [[ "$replay" != "y" ]]; then 
        #The message we print out to the user if they decided to quit the game
        echo "Alright then, see you later!"
        break
    #if the user does anything other than answer "n", then we continue
    else
        continue
    fi

done
