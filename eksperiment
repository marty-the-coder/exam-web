#!/bin/bash
#creating a function that extracts the list of cities we made from Nicolais folksite and using "-s" to suppress the output
cities_list() {
    curl -s "https://nicobus.folk.ntnu.no/cities"
}

#making a variable that extracts the coordinates of the random city the user will guess the temperature in
city_coordinates() {
    #We used local to make the variables belong to the "city_coordinates" function so that if we use the same variable names later, it doesn't crash 
    #retrieving the values from the cities.txt file with "$1" and "$2"
    local latitude="$1"
    local longitude"$2"

    #Getting the weather information with the "curl" command about the different cities from the open-meteo API and using "-s" to 
        #suppress the output so that we can create the output that we want to instead and making it into a variable that we used
        #in the next section
    local response=$(curl -s "https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true")

    #making a new local variable where we print out the "response" variable from the last part and then using "| jq" to extract 
        #a specific part. In this case we only want the temperature, so we used '.current_weather.temperature' to extract only the
        #temperature from the weather API
    local temp=$(echo "$response" | jq '.current_weather.temperature')
    #printing out the temperature using the variable created in the last line
    echo "$temp"
}

#making a loop that keeps going until 
while true; do

    #Making a variable for the temperature at the given latitude and longitude
    temperature=$()

    #Asking the user if they want to play again
    echo "Do you want to try again? (y/n)"
    read -r replay
    #checking if the user wants to play again or not
    #At first, we had "if [[ "$replay" = "n" ]]; then", but we felt that it was more natural that if the user writes something random then they stop the game, rather 
        #than continuing, so we decided to change that:
        #We now have that if the answer is not "y", then the program stops and prints out the break message
    if [[ "$replay" != "y" ]]; then 
        #The message we print out to the user if they decided to quit the game
        echo "Alright then, see you later!"
        break
    #if the user does anything other than answer "n", then we continue
    else
        continue
    fi

done
