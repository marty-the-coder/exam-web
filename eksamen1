#!/bin/bash

# This line tells the system that this is a Bash script

echo "Content-type: text/html"
echo ""  # Blank line required between headers and body for the HTML response

# Define the file paths for storing user credentials, city data, and temperature data
user_file="/var/www/html/users1.txt"  # Path to file that holds user credentials
cities_file="/var/www/html/cities.txt"  # Path to file with a list of cities (name, latitude, longitude)
temperature_file="/var/www/html/temperature_data.json"  # Path to a JSON file with city temperatures

# Function to hash passwords using SHA-256
hash_password() {
  echo -n "$1" | openssl dgst -sha256 | awk '{print $2}'  # Hashes the input (password) and returns only the hashed value
}

# Function to validate user credentials (username and password)
validate_user() {
  local username="$1"  # The username passed to the function
  local hashed_password="$2"  # The hashed password passed to the function
  
  # Read through each line in the user_file
  while IFS=: read -r file_username file_password; do
    if [[ "$file_username" == "$username" && "$file_password" == "$hashed_password" ]]; then
      return 0  # Return 0 if credentials match (valid user)
    fi
  done < "$user_file"
  return 1  # Return 1 if credentials don't match (invalid user)
}

# Function to decode URL-encoded strings
urldecode() {
  local encoded="$1"
  printf '%b' "${encoded//%/\\x}"  # Decode percent-encoded characters
}

# Function to parse the query string (key-value pairs) from the URL
parse_query_string() {
  local query="$1"
  local key_value
  IFS='&' read -ra key_value <<< "$query"  # Split query string into key-value pairs
  for pair in "${key_value[@]}"; do
    local key=$(echo "$pair" | cut -d'=' -f1)  # Get the key (parameter name)
    local value=$(echo "$pair" | cut -d'=' -f2)  # Get the value (parameter value)
    eval "$key=\"$(urldecode "$value")\""  # Assign the decoded value to the corresponding variable
  done
}

# Check if the query string exists and parse it if so
if [[ -n "$QUERY_STRING" ]]; then
  parse_query_string "$QUERY_STRING"
fi

# Handle logout action by checking for 'logout=true' in the query string
if [[ "$QUERY_STRING" == *"logout=true"* ]]; then
  echo ""  # Blank line for HTTP header
  echo "<html><body><center><p>You have been logged out. <a href='eksamen1.sh'>Login again</a>.</p></center></body></html>"
  exit 0
fi

# Handle login action (checks if username and password are provided and valid)
if [[ -n "$username" && -n "$password" && "$action" == "login" ]]; then
  hashed_password=$(hash_password "$password")  # Hash the provided password
  if validate_user "$username" "$hashed_password"; then  # Check if the username and hashed password are valid
    echo ""  # End of headers
    echo "<html><body><center><p>Login successful! <a href='eksamen1.sh?play=true&username=$username'>Start the game</a>.</p></center></body></html>"
    exit 0
  else
    echo ""  # End of headers
    echo "<html><body><center><p>Invalid credentials. <a href='eksamen1.sh'>Try again</a>.</p></center></body></html>"
    exit 0
  fi
fi

# Handle sign-up action (checks if the username already exists)
if [[ -n "$username" && -n "$password" && "$action" == "signup" ]]; then
  # Check if the username already exists in the user file
  while IFS=: read -r file_username _; do
    if [[ "$file_username" == "$username" ]]; then
      echo ""  # End of headers
      echo "<html><body><center><p>Username already exists. <a href='eksamen1.sh'>Try again</a>.</p></center></body></html>"
      exit 0
    fi
  done < "$user_file"
  
  # If the username doesn't exist, hash the password and add the new user to the user file
  hashed_password=$(hash_password "$password")
  echo "$username:$hashed_password" >> "$user_file"  # Append the new user to the file
  echo ""  # End of headers
  echo "<html><body><center><p>Signup successful! <a href='eksamen1.sh'>Login now</a>.</p></center></body></html>"
  exit 0
fi

# Check if the user is logged in (username is in the query string) and wants to play the game
if [[ -n "$username" && "$QUERY_STRING" == *"play=true"* ]]; then
  echo ""  # End of headers
  echo "<html><body style='background-color: lightblue; margin-top: 150px;'>"
  echo "<center>"
  echo "<h1>Guess the Temperature Game!</h1>"
  echo "<p>Welcome, $username!</p>"

  # Fetch a random city from the cities file
  random_city=$(shuf -n 1 "$cities_file")  # Randomly select one city from the list
  city_name=$(echo "$random_city" | cut -d',' -f1)  # Extract the city name
  latitude=$(echo "$random_city" | cut -d',' -f2)  # Extract the city latitude
  longitude=$(echo "$random_city" | cut -d',' -f3)  # Extract the city longitude

  # Get the temperature for the city from the temperature data JSON file using jq
  city_temp=$(jq -r --arg city "$city_name" '.[] | select(.city == $city) | .temperature' "$temperature_file")

  # Display a form for the user to make their temperature guess
  echo "<p>Guess the current temperature in $city_name:</p>"
  echo "<form method='get' action='eksamen1.sh'>"
  echo "<input type='text' name='user_guess' placeholder='Enter your guess in Celsius' />"
  echo "<input type='hidden' name='city_name' value='$city_name' />"
  echo "<input type='hidden' name='latitude' value='$latitude' />"
  echo "<input type='hidden' name='longitude' value='$longitude' />"
  echo "<input type='hidden' name='username' value='$username' />"
  echo "<input type='submit' value='Submit Guess' />"
  echo "</form>"

  echo "<p><a href='eksamen1.sh?logout=true&username=$username'>Logout</a></p>"
  echo "</center>"
  echo "</body></html>"
  exit 0
fi

# Handle the guess submission after the user submits their guess
if [[ -n "$user_guess" && -n "$city_name" && -n "$latitude" && -n "$longitude" && -n "$username" ]]; then
  actual_temp=$(jq -r --arg city "$city_name" '.[] | select(.city == $city) | .temperature' "$temperature_file")  # Get actual temperature from JSON file

  # Calculate the difference between the guessed temperature and the actual temperature (absolute value)
  diff=$(echo "$user_guess - $actual_temp" | bc | tr -d -)

  # Show results of the guess
  echo ""  # Blank line required between headers and body
  echo "<html><body style='background-color: lightblue; margin-top: 150px;'>"
  echo "<center>"
  echo "<h1>Guess the Temperature Game!</h1>"
  echo "<p>Your guess: $user_guess&deg;C</p>"
  echo "<p>Actual temperature: $actual_temp&deg;C</p>"
  
  # Check how close the guess is to the actual temperature
  if [[ $(echo "$diff < 5" | bc -l) -eq 1 ]]; then
    echo "<p>Congratulations! You were close!</p>"
  else
    echo "<p>Better luck next time!</p>"
  fi

  # Provide a link to play again or log out
  echo "<p>Play again? <a href='eksamen1.sh?play=true&username=$username'>Yes</a> | <a href='eksamen1.sh?logout=true&username=$username'>No, Logout</a></p>"
  echo "</center>"
  echo "</body></html>"
  exit 0
fi

# Display the login/signup form if no action is taken
echo ""  # Blank line for HTTP header
echo "<html>"
echo "<body style='background-color: lightblue; margin-top: 150px;'>"
echo "<center>"
echo "<h1>Welcome to the Guess the Temperature Game!</h1>"
echo "<form method='get' action='eksamen1.sh'>"
echo "<input type='text' name='username' placeholder='Username' required /><br><br>"
echo "<input type='password' name='password' placeholder='Password' required /><br><br>"
echo "<button type='submit' name='action' value='login'>Log In</button>"
echo "<button type='submit' name='action' value='signup'>Sign Up</button>"
echo "</form>"
echo "</center>"
echo "</body>"
echo "</html>"
