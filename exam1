#!/bin/bash

# Function to fetch cities from the provided URL
fetch_cities() {
  curl -s "https://nicolbus.folk.ntnu.no/cities"
}

# Function to get the temperature for a city using latitude and longitude
get_temperature_by_coords() {
  local lat="$1"
  local lon="$2"
  
  # Fetch weather data using Open-Meteo API
  local response=$(curl -s "https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true")
  
  # Extract temperature from the JSON response
  local temp=$(echo "$response" | jq '.current_weather.temperature')
  echo "$temp"
}

# Ensure jq is installed
if ! command -v jq &> /dev/null; then
    echo "Error: jq is not installed. Please install jq to run this script."
    exit 1
fi

# Fetch and parse city data
CITY_DATA=$(fetch_cities)
if [[ -z "$CITY_DATA" ]]; then
  echo "Failed to fetch city data. Exiting."
  exit 1
fi

# Convert city data into an array
IFS=$'\n' read -r -d '' -a CITIES <<< "$CITY_DATA"

# Verify city list is not empty
if [[ ${#CITIES[@]} -eq 0 ]]; then
    echo "No cities found in the list. Exiting."
    exit 1
fi

# Game loop
while true; do
  # Randomly select a city
  RANDOM_CITY_INFO=$(printf "%s\n" "${CITIES[@]}" | shuf -n 1)
  CITY_NAME=$(echo "$RANDOM_CITY_INFO" | cut -d',' -f1)
  LATITUDE=$(echo "$RANDOM_CITY_INFO" | cut -d',' -f2)
  LONGITUDE=$(echo "$RANDOM_CITY_INFO" | cut -d',' -f3)

  # Ensure the selected city data is valid
  if [[ -z "$CITY_NAME" || -z "$LATITUDE" || -z "$LONGITUDE" ]]; then
      echo "Malformed city data. Skipping."
      continue
  fi

  # Ask the user to guess the temperature
  echo "Guess the current temperature in ${CITY_NAME} (type 'quit' to exit):"
  read -r USER_GUESS

  # Allow the user to exit
  if [[ "$USER_GUESS" == "quit" ]]; then
      echo "Goodbye! Thanks for playing."
      break
  fi

  # Validate the user's guess
  if ! [[ "$USER_GUESS" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
      echo "Please enter a valid number for the temperature."
      continue
  fi

  # Fetch the actual temperature
  ACTUAL_TEMP=$(get_temperature_by_coords "$LATITUDE" "$LONGITUDE")

  # Handle API errors
  if [[ "$ACTUAL_TEMP" == "null" ]]; then
      echo "Failed to fetch the temperature for ${CITY_NAME}. Please try again."
      continue
  fi

  # "DIFF" will compare the users guessed temperature to the actual temperature. The "bc" command is used as for doing math like a calculator
  # "tr -d" will remove the minus sign to make the difference always be positive.
  DIFF=$(echo "$ACTUAL_TEMP - $USER_GUESS" | bc | tr -d -)
  # if 
  if (( $(echo "$DIFF < 3" | bc -l) )); then
      echo "Congratulations! The actual temperature in ${CITY_NAME} is ${ACTUAL_TEMP}°C. You were close!"
  else
      echo "Sorry, the actual temperature in ${CITY_NAME} is ${ACTUAL_TEMP}°C. Better luck next time!"
  fi

  # Ask the user if they want to play again
  echo "Do you want to play again? (yes/no)"
  read -r PLAY_AGAIN
  if [[ "$PLAY_AGAIN" != "yes" ]]; then
      echo "Goodbye! Thanks for playing."
      break
  fi
done

# HUSK Å FJERNE RANDOM CITIES: FRA TXT FIL!!!!!


